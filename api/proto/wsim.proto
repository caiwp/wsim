syntax = "proto3";

package pb;

option go_package = "./pb";

// 操作
enum Op {
  NONE      = 0;  // 空
  AUTH      = 1;  // 鉴权
  SEND      = 2;  // 发送
  HEARTBEAT = 3;  // 心跳
  KICK      = 4;  // 踢出
}

// 交互消息体
message Proto {
  int32 ver   = 1;  // 版本
  int32 op    = 2;  // 操作 对应 Op
  int32 seq   = 3;  // 系列号
  string body = 4;  // 内容
}

// --------------------发送服务端数据-----------------------------
// 业务
service Busi {
  // 鉴权
  rpc Auth(AuthReq) returns (AuthReply) {}
  // 操作
  rpc Operate(OperateReq) returns (OperateReply) {}
}

// 鉴权
message AuthReq {
  uint32 rid   = 1;  // 房间ID
  string token = 2;  // 用户TOKEN
}
message AuthReply {
  uint32 cid = 1;  // 用户ID
}

// 操作
message OperateReq {
  Proto proto = 1;
}
message OperateReply {}

// --------------------接收服务端数据-----------------------------
service WsIm {
  // 推送个人
  rpc PushOne(PushOneReq) returns (PushOneReply) {}
  // 批量推送
  rpc PushBatch(PushBatchReq) returns (PushBatchReply) {}
  // 广播房间
  rpc BroadcastRoom(BroadcastRoomReq) returns (BroadcastRoomReply) {}
  // 服务信息
  rpc ServerInfo(ServerInfoReq) returns (ServerInfoReply) {}
}

// 推送个人
message PushOneReq {
  uint32 rid  = 1;  // 房间ID
  uint32 cid  = 2;  // 用户ID
  Proto proto = 3;
}
message PushOneReply {}

// 批量推送
message PushBatchReq {
  message Item {
    uint32 rid   = 1;  // 房间ID
    uint32 cid   = 2;  // 用户ID
    Proto proto  = 3;
    bool success = 4;  // 是否成功
    string msg   = 5;  // 错误信息
  }
  repeated Item list = 1;
}
message PushBatchReply {}

// 广播房间
message BroadcastRoomReq {
  uint32 rid  = 1;  // 房间ID
  Proto proto = 2;
}
message BroadcastRoomReply {}

message ServerInfoReq {
  repeated uint32 rids = 1;  // 房间ID 可选
}

message ServerInfoReply {
  message Item {
    uint32 rid = 1;  // 房间ID
    uint32 num = 2;  // 用户数量
  }
  repeated Item list = 1;
}
